
/* This is how you can center text*/
h1 {
    text-align: center;
    background-color: hsl(210, 100%, 50%); /* This sets the background color of the h1 element */
    background: linear-gradient(90deg, rgb(58, 58, 134) 20%, rgb(177, 177, 207)); /* This creates a linear gradient background */
    color: hsla(210, 100%, 50%, 0.8); /* This sets the text color of the h1 element */
    color: #3a3a86; /* This sets the text color of the h1 element using hex */
    opacity: 50%; /* This sets the opacity of the h1 element to 50% */
}

p:hover {
    transform: scale(1.2); /* This scales the text to 120% of its original size */
    text-align: center; /* This centers the text */
}

/* There's different units like px, em, rem, %, vh, vw, etc. */
img {
    width: 10px; /* This sets the width of the image to 10 pixels */
    height: 1em; /* This sets the height of the image to 1em (relative to the font size) */
    width: 1rem; /* This sets the width of the image to 1rem (relative to the root font size) */
    height: 100%; /* This sets the height of the image to 100% of its container */
    width: 100vw; /* This sets the width of the image to 100% of the viewport width */
    height: 100vh; /* This sets the height of the image to 100% of the viewport height */
    border-left-width: 10px; /* This sets the left border width of the image to 10 pixels */
    border-left-style: solid; /* This sets the left border style of the image to solid */
    border-left-color: #3a3a86; /* This sets the left border color of the image to #3a3a86 */
    border-right: 1opx solid #3a3a86; /* This sets the right border of the image to 10 pixels solid with color #3a3a86 */
}

/* You can use a calc function to calculate the width and height of an element */
img {
    width: calc(100% - 20px); /* This sets the width of the image to 100% of its container minus 20 pixels */
    height: calc(100vh - 50px); /* This sets the height of the image to 100% of the viewport height minus 50 pixels */
    max-width: 100%; /* This makes sure the image doesn't overflow its container */
    max-height: 100vh; /* This makes sure the image doesn't overflow the viewport height */
    min-width: 50px; /* This sets the minimum width of the image to 50 pixels */
    min-height: 50px; /* This sets the minimum height of the image to 50 pixels */
}

/* This is how you can style a navigation bar */
nav {
    background-color: #3a3a86; /* This sets the background color of the navigation bar */
    padding: 10px; /* This adds space inside the navigation bar */
    border-radius: 5px; /* This rounds the corners of the navigation bar */
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* This adds a shadow to the navigation bar */
}

* {
    margin: 0; /* This removes the default margin from all elements */
    padding: 0; /* This removes the default padding from all elements */
    box-sizing: border-box; /* This makes sure the width and height of elements include padding and border */
}

/* You can do this with multiple elements */
h2, h3, p {
    text-align: center;
}

/* This is how you can style the ul in a navigation bar anywehere in your file*/
nav ul {
    list-style-type: none; /* This removes the bullet points from the list */
    padding: 0; /* This removes the padding from the list */
    text-align: center; /* This centers the list */
}

/* This is how you can style the input elements */
input[type="text"]:focus {
    width: 100%; /* This sets the width of the input to 100% of its container */
    padding: 10px; /* This adds space inside the input */
    border: 1px solid #ccc; /* This adds a border to the input */
    border-radius: 5px; /* This rounds the corners of the input */
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* This adds a shadow to the input */
}

/* This is how you target a child element of a list item */
nav > ul {
    text-decoration: none; /* This removes the underline from the links */
    color: #3a3a86; /* This changes the color of the links */
    font-weight: bold; /* This makes the text bold */
}

/* This is how you can style the h2 element that comes after a div */
div + h2 {
    margin-top: 20px; /* This adds space above the h2 element */
}

/* This is how you can style all the h2 element that comes after a div */
div ~ h2 {
    margin-top: 10px; /* This adds space above the h2 element */
}

/* This is how you can change the color of text */
h1 {
    color: #3a3a86;
}

h1::before {
  content: "ðŸ¥³ "
}

h1::after {
  content: " ðŸ¥³";
}

hr {
    border: 1px solid #3a3a86; /* This changes the color of the line */
}

/* You can also change the background color and add a background image */
body {
    background-color: #b1b1cf;
    background-image: url('https://images2.alphacoders.com/588/588105.png');
    background-position: center; /* This centers the image */
    background-size: contain; /* This makes sure the image fits the container */
    background-attachment: fixed; /* This makes sure the image doesn't move when scrolling */
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; /* This sets the font for the whole page. There's multiple as fallback incase one is not available */
    font-style: normal; /* This sets the font style to normal */
    font-size: 20px; /* This sets the font size for the whole page */
}


a {
    color: #3a3a86; /* This changes the color of links */
    font-family: Arial, Helvetica, sans-serif; /* This sets the font for links */
    text-decoration: none; /* This removes the underline from links */
    color:rgb(255, 231, 234);
    background-color: #3a3a86; /* This sets the background color of links */
    transform: scale(1); /* This sets the initial scale of the links */
    transition: transform 0.3s, background-color 0.3s ease; /* This adds a transition effect when the link is hovered */
}

a:visited {
    color: #2a2a66; /* This changes the color of visited links */
}

a:hover {
    color: #1a1a46; /* This changes the color of links when hovered */
}

a:active {
    color: #0a0a26; /* This changes the color of links when clicked */
}

a:focus {
    outline: 2px solid #3a3a86; /* This adds an outline to links when focused */
}

ul {
    list-style-type: square; /* This changes the bullet points to squares */
    list-style-position: inside; /* This makes the bullet points inside the list */
    list-style-image: url('https://example.com/square-bullet.png'); /* This changes the bullet points to a custom image */
}

img {
    max-width: 100%; /* This makes sure the image doesn't overflow the container */
    height: auto; /* This keeps the aspect ratio of the image */
    display: block; /* This makes the image a block element */
    margin: 0 auto; /* This centers the image */
    margin-top: -10px; /* This adds space above the image */
    margin-bottom: 20px; /* This adds space below the image */
    border-bottom: #2a2a66 2px solid; /* This adds a border around the image */
    border-left: #b1b1cf 2px solid; /* This adds a border to the left side of the image */
    border-radius: 10px; /* This rounds the corners of the image */
    outline: auto;  /* This adds an outline to the image, doesn't change it's side not like border*/
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* This adds a shadow to the image */
}

/* This is how you can style something you put an id on. Here is the ion id=text-elements */
#text-elements {
    background-color: #e5e3ff;
    padding: 20px;
    border-radius: 10px;
    width: 450px; /* You can also use % which can be easier to vizualize */
    max-width: 500px; /* This limits the width to 500px */
    margin: 0 auto; /* This centers the element */
}
/* This is how you can style something you put a class on */
.group-heading {
    background-color: #e0e0e0;
    padding: 15px;
    border-radius: 5px;
    margin: 10px 0; /* This adds space above and below the box */
    background: linear-gradient(to right, #3a3a86, #b1b1cf), url('https://images2.alphacoders.com/588/588105.png'); /* This creates a linear gradient background with an image */
}

/* This is how you can style a group of elements with a class. here I want only the "p" paragraph of the texts*/
.texts p {
    display: inline-block; /* This allows the text to be centered */
    margin: 0 10px; /* This adds space between the paragraphs */
}

/* Here is a list of tree-structural pseudo-classes you can use to style elements based on their position in the document tree */
:root {} /* This targets the root element of the document */
:empty {} /* This targets elements that have no children */
:first-child {} /* This targets the first child of a parent */
:last-child {} /* This targets the last child of a parent */
:nth-child(n) {} /* This targets the nth child of a parent, where n can be a number, keyword, or formula */
:nth-last-child(n) {} /* This targets the nth child from the end of a parent */
:first-of-type {} /* This targets the first element of its type within a parent */
:last-of-type {} /* This targets the last element of its type within a parent */
:nth-of-type(n) {} /* This targets the nth element of its type within a parent */
:nth-last-of-type(n) {} /* This targets the nth element of its type from the end of a parent */
:only-child {} /* This targets elements that are the only child of their parent */
:only-of-type {} /* This targets elements that are the only of their type within a parent

/* Here are examples of functional pseudo-classes you can use to style elements based on their state */
:is(selector) {} /* This matches elements that match any of the selectors in the list */
:where(selector) {} /* This matches elements that match any of the selectors in the list, but has no specificity */
:not(selector) {} /* This matches elements that do not match the selector */
:has(selector) {} /* This matches elements that contain at least one element that matches the selector */

/* Here are examples of pseudo-elements you can use to style specific parts of an element */
::before {} /* This inserts content before the element */
::after {} /* This inserts content after the element */
::first-letter {} /* This styles the first letter of the element */
::first-line {} /* This styles the first line of the element */
::placeholder {} /* This styles the placeholder text of an input element */
::selection {} /* This styles the text that is selected by the user */
::backdrop {} /* This styles the backdrop of a modal or dialog */
::marker {} /* This styles the marker of a list item */

/* Here are examples of locational pseudo-classes you can use to style elements based on their position in the document */
:link {} /* This targets links that have not been visited */
:visited {} /* This targets links that have been visited */
:any-link {} /* This targets any link, regardless of its state */
:target {} /* This targets the element that is the target of a URL fragment */
:target-within {} /* This targets the element that is the target of a URL fragment, and any of its descendants */
:focus-within {} /* This targets an element that has focus or contains an element that has focus */
:focus-visible {} /* This targets an element that has focus and is visible to the user */
:focus-within {} /* This targets an element that has focus or contains an element that has focus */
:enabled {} /* This targets form elements that are enabled */
:disabled {} /* This targets form elements that are disabled */
:checked {} /* This targets form elements that are checked, like checkboxes and radio buttons */
:indeterminate {} /* This targets form elements that are in an indeterminate state, like checkboxes */
:valid {} /* This targets form elements that are valid */
:invalid {} /* This targets form elements that are invalid */
:required {} /* This targets form elements that are required */
:optional {} /* This targets form elements that are optional */
:hover {} /* This targets elements when the user hovers over them */
:active {} /* This targets elements when the user clicks on them */
:focus {} /* This targets elements when the user focuses on them */
:visited {} /* This targets links that have been visited */